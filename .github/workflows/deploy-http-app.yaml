name: do-the-job
on: 
  pull_request:
  workflow_dispatch:
jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          ec2-image-id: ami-0b0f32dcd0f4d8748
          ec2-instance-type: t2.micro
          subnet-id: subnet-0a86dab9c8e68de78
          security-group-id: sg-0d4cc60089d389255
          # iam-role-name: my-role-name # optional, requires additional permissions
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]
  build-ami:
    name: Build Golden AMI for Static app
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps: 
      - name: Build AMI with Packer
        run: packer init . && packer build .
        working-directory: ./packer
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEVOPS_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVOPS_AWS_SECRET_ACCESS_KEY }}
  deploy-infra:
    name: Deploy AWS Infrastructure with Terraform
    needs: 
      - start-runner
      - build-ami
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps: 
      - name: Deploy
        run: terraform init && terrafrom plan && terraform apply -auto-approve
        working-directory: ./terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEVOPS_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVOPS_AWS_SECRET_ACCESS_KEY }}
      TF_VAR_PUBLIC_KEY_MATERIAL: ${{ secrets.TF_VAR_PUBLIC_KEY_MATERIAL }}
  setup-hosts:
    name: Setup EC2 Instances with Ansible
    needs: 
      - start-runner
      - build-ami
      - deploy-infra
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps: 
      - name: Ansible Setup
        run: ansible-playbook -i inventory.aws_ec2.yml main.yml
        working-directory: ./ansible
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEVOPS_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVOPS_AWS_SECRET_ACCESS_KEY }}
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner
      - build-ami
      - deploy-infra
      - setup-hosts
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}